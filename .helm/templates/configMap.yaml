---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}
data:
  label_master_loop.sh: |
    #!/bin/bash
    if [[ $1 == "--config" ]] ; then
      cat <<EOF
    {
      "configVersion":"v1",
      "kubernetes": [
        {
          "apiVersion": "v1",
          "kind": "Endpoints",
          "executeHookOnEvent": [
            "Added",
            "Modified"
          ],
          "labelSelector": {
            "matchLabels": {
            {{- range $i, $val := .Values.label_endpoint }}
              {{ $i | quote }}: {{ $val | quote }},
            {{- end }}
            }
          },
          "namespace": {
            "nameSelector": {
              "matchNames": [
                {{ .Release.Namespace | quote }}
              ]
            }
          }
        }
      ]
    }
    EOF
    else

      ### for debug
      # set -x
      # cat $BINDING_CONTEXT_PATH >> /tmp/log-$(date +%s).txt

      function atoi
      {
        #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
        IP=$1; IPNUM=0
        for (( i=0 ; i<4 ; ++i )); do
          ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
          IP=${IP#*.}
        done
        echo $IPNUM
      }

      ns={{ .Release.Namespace }}
      found=false
      maxIp="0"
      podName=""
      newElection=false
      jq_selector=""

      length=$(jq -r '. | length' $BINDING_CONTEXT_PATH)
      cnt=$(( length - 1 ))
      echo "length: $length"

      type=$(jq -r '.['$cnt'].type' $BINDING_CONTEXT_PATH)
      if [[ $type == "Event" ]] ; then
        watchEvent=$(jq -r '.['$cnt'].watchEvent' $BINDING_CONTEXT_PATH)
      fi

      echo "INFO: New action type: $type, watchEvent: $watchEvent"

      if [[ $type == "Synchronization" ]] ; then
        jq_selector=".[$cnt] | select(.objects != null) | .objects[].object | select(.subsets != null) | .subsets[] | select(.addresses != null) |.addresses[]"
      elif [[ $type == "Event" ]] ; then
        jq_selector=".[$cnt].object | select(.subsets != null) | .subsets[] | select(.addresses != null) |.addresses[]"
      fi

      # find all IP from endpoint
      for ip in $(jq -r "$jq_selector | .ip" $BINDING_CONTEXT_PATH)
      do
        a=$(atoi $ip)
        b=$(atoi $maxIp)

        # compare IPs, remember max IP
        if [[ $a > $b ]]; then
          maxIp=$ip
          found=true
        fi
      done

      if $found; then
        # get podName by IP
        podName=$(jq -r "$jq_selector | select(.ip == \"$maxIp\") | .targetRef.name" $BINDING_CONTEXT_PATH)

        for pod in $(kubectl -n $ns get po -l loop-master="true" -o json | jq -r '.items[] | .metadata.name')
        do
          if [ "$pod" != "$podName" ]; then
            echo "INFO: Unlabel old master $pod"
            kubectl -n $ns label pod $pod loop-master-
            newElection=true
          fi
        done

        if $newElection; then
          echo "INFO: Elected NEW master is $podName, label it."
        else
          echo "INFO: Elected master is $podName, label it."
        fi

        kubectl -n $ns label pod $podName loop-master="true" --overwrite
      else
        echo "WARN: no one pod was not found"
      fi

      check_cnt=$(kubectl -n $ns get po -l loop-master="true" -o json | jq '.items | length')

      if [ $check_cnt -le 0 ]; then
        echo "FATAL: cant find master pod";
      fi

    fi

  cron_election.sh: |
    #!/usr/bin/env bash

    if [[ $1 == "--config" ]] ; then
      cat <<EOF
    {
      "configVersion":"v1",
      "schedule": [
        {
          "name": "every 1 min",
          "crontab": "*/1 * * * *"
        }
      ]
    }
    EOF
    else

      ## set for debug
      # set -x

      ns={{ .Release.Namespace }}
      check_cnt=$(kubectl -n $ns get po -l loop-master="true" -o json | jq '.items | length')
      found=false
      check=false
      newElection=false

      function atoi
      {
        #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
        IP=$1; IPNUM=0
        for (( i=0 ; i<4 ; ++i )); do
          ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
          IP=${IP#*.}
        done
        echo $IPNUM
      }

      if [ $check_cnt -le 0 ]; then
        echo "WARN: cron no master found, start election"
        maxIp="0"

      elif [ $check_cnt -eq 1 ]; then
        echo "INFO: cron master already selected, check"

        masterPodName=$(kubectl -n $ns get po -l loop-master="true" -o json | jq -r ".items[0] | .metadata.name")
        if [ -z "${masterPodName}" ]; then
          echo "ERROR: cron masterPodName not found"
        fi

        masterPodIp=$(kubectl -n loop-stage get ep {{ .Chart.Name }} -o json | jq -r "select(.subsets != null) | .subsets[]| select(.addresses != null) | .addresses[] | select(.targetRef.name==\"$masterPodName\") |.ip")
        if [ -z "${masterPodIp}" ]; then
          echo "ERROR: cron masterPodIp not found"
        fi
        maxIp=$masterPodIp

      elif [ $check_cnt -gt 1 ]; then
        echo "WARN: cron more one master found, start check"
        check=true
        maxIp="0"

      fi

      for ip in $(kubectl -n $ns get ep -l {{ include "sring.lables" . }} -o json | jq -r ".items[] | select(.subsets != null) | .subsets[] | select(.addresses != null)| .addresses[] | .ip")
      do
        a=$(atoi $ip)
        b=$(atoi $maxIp)

        # compare IPs, remember max IP
        if [[ $a > $b ]]; then
          maxIp=$ip
          found=true
        fi
      done

      if $found || $check; then
        echo "INFO: cron new master election"
        podName=$(kubectl -n $ns get ep -l {{ include "sring.lables" . }} -o json | jq -r ".items[] | select(.subsets != null) | .subsets[] | select(.addresses != null)| .addresses[] | select(.ip == \"$maxIp\") | .targetRef.name")

        for pod in $(kubectl -n $ns get po -l loop-master="true" -o json | jq -r '.items[] | .metadata.name')
        do
          if [ "$pod" != "$podName" ]; then
            echo "INFO: cron Unlabel old master $pod"
            kubectl -n $ns label pod $pod loop-master-
            newElection=true
          fi
        done

        if $newElection; then
          echo "INFO: cron Elected NEW master is $podName, label it."
        else
          echo "INFO: cron Elected master is $podName, label it."
        fi

        kubectl -n $ns label pod $podName loop-master="true" --overwrite
      else
        echo "INFO: cron current master pod: $masterPodName, no new election"
      fi


    fi
